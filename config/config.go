// Code generated by go-bindata.
// sources:
// config/machines.yaml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configMachinesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x96\xd1\xce\xe2\x20\x10\x85\xef\x7d\x0a\x5e\x60\x09\x0c\x94\xf6\xf7\x6d\x0c\x6d\x5c\x12\x59\x0d\xae\x89\xfb\xf6\x7b\xa7\x73\x06\x3b\xad\xf7\x9f\x74\xce\x99\x4f\xc2\x2f\x93\x6f\x8f\xfb\xd1\xf8\x83\x31\x75\xa9\xd7\xf6\xef\x68\xbc\x1d\x0f\xc6\xfc\x39\xd5\xe5\x68\xaa\xb7\xf7\x7a\xba\x5c\x0e\x9f\xc0\x60\xc7\x81\x93\x75\x99\xcb\xa3\xbe\x50\x62\xe8\x68\x81\xbc\x9c\xda\x79\x79\x81\x91\x7f\x7c\xb0\x8e\x93\x4f\x44\x69\x65\xce\xdc\x7d\x7d\x82\xaf\x3b\x4e\x8a\x33\x03\x3f\x34\x39\x36\x69\xce\x64\x27\x41\xfb\xc4\x68\x22\x4e\x9f\xbd\x8d\xda\xbc\xa3\xf5\xef\x68\x24\xc7\xe0\x2d\x84\x68\x89\xa3\x24\x58\x1e\x2e\x4d\x36\x72\x56\x8e\x00\xe7\xf2\x74\xa5\x1b\x01\x8e\xf5\xac\xb4\xd2\x8f\x00\x3d\x78\x22\xa4\xe5\x10\xd0\x31\xc5\x88\xb4\xda\x31\x6c\xe4\x77\xe9\x3b\xe6\x4a\x3a\x9b\x7c\x78\xd1\x7f\xbd\xad\x25\xb7\xeb\x0e\x7b\xc3\x6e\x7b\xc3\x6e\x7b\x83\xd6\x6f\x70\x88\x6a\x2b\x86\x63\xcf\xfd\x2e\xa4\xc1\x00\xcb\x72\x39\x3b\xf1\x19\xa2\x16\x2c\x21\xa9\x05\x23\x44\x55\x71\x52\x44\xb8\x93\xd7\xc1\x10\x0e\x69\xef\x04\x9e\xf8\xcc\x34\x88\xa1\x7d\x52\xaa\x00\x1d\xb2\xd6\x05\xb7\x21\xab\x55\xc0\xde\xf2\x46\x15\x20\x44\xee\xab\x08\x69\x6d\xc9\x39\xaa\x4b\xc6\x64\x9a\xbe\x90\x4c\xb5\x17\x93\xf5\xf6\x2a\xc9\x82\x7e\x39\x24\x01\xcb\x64\x71\xed\x8e\xba\x75\xd7\x19\x9c\x1b\xa7\x09\x61\x79\x30\xb8\x33\x82\xc5\x37\xea\xdd\x01\xfc\x67\xe4\xaa\x3d\x7d\x8f\x7b\x82\xfa\x7e\x06\xc2\x1f\x04\xd9\x20\x61\xdb\xf4\xde\x4c\xd3\xe4\x84\x1b\xbe\xa9\x76\x42\x7b\x6d\xc3\x4e\xbc\xe1\xdb\x07\x3d\xd7\x6f\xf8\xd6\xfb\x09\xed\xe1\x6a\xda\xc6\x1f\x55\x94\xa1\xf9\x8c\x65\xa8\x42\x63\x19\x1b\x42\x8b\x32\x36\x8c\x16\x65\xf4\x4a\xaf\xa7\x2b\xbb\xd3\x95\xfd\xe9\xca\x57\xe9\xca\x57\xe9\x4a\x9f\x4e\x59\x75\x09\xfd\xaa\x57\x13\xce\xfb\x9f\x2b\xf3\x57\xcf\x95\xf9\xc3\x73\x25\xad\x26\x9c\xdf\x37\xc7\xff\x00\x00\x00\xff\xff\xa4\xd8\xb8\x85\x3d\x0b\x00\x00")

func configMachinesYamlBytes() ([]byte, error) {
	return bindataRead(
		_configMachinesYaml,
		"config/machines.yaml",
	)
}

func configMachinesYaml() (*asset, error) {
	bytes, err := configMachinesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/machines.yaml", size: 2877, mode: os.FileMode(420), modTime: time.Unix(1495728677, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/machines.yaml": configMachinesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"machines.yaml": &bintree{configMachinesYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

